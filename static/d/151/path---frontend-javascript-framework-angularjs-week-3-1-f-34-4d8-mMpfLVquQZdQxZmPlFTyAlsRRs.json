{"data":{"site":{"siteMetadata":{"title":"bono's blog","author":"bono"}},"markdownRemark":{"id":"aea8e0a0-4502-579e-87e7-9bad5e9c4a3c","excerpt":"Single Page Applications Angular Factory, Service and Dependency Injection Dependency Injection Dependency Injection(DI…","html":"<h2>Single Page Applications</h2>\n<h3>Angular Factory, Service and Dependency Injection</h3>\n<h4>Dependency Injection</h4>\n<p>Dependency Injection(DI)이란 의존성을 해결하기 위한 Inversino of Control(IoC)을 구현한 소프트웨어 디자인 패턴이다. IoC(제어의 역전)와 DI(의존성 주입)는 여전히 영어로든, 한글로 번역해서든 이해하기 힘든건 마찬가지다. 우선, Ioc 라는건 내가 짜놓은 것을 무언가 대신 해주는 개념으로 받아들이면 되겠다. 스프링 같은 프레임웍에서는 컨테이너라는 녀석이 바로 IoC 에 해당한다. IoC 개념을 이해하고 다시 DI 를 살펴보자. DI 는 구성 요소간의 의존관계를 무언가 대신 처리해주는(IoC, 설정 or 객체 or 무엇이든) 디자인 패턴이라 말할 수 있다. 여전히 조금 모호하다.</p>\n<p>마틴 파울러가 말한 DI 를 구현하는 세가지 방법은 다음과 같다.</p>\n<ul>\n<li>Create dependency using new operator</li>\n<li>Look up dependency using a global variable</li>\n<li>Have dependency passed to it where needed</li>\n</ul>\n<p>위의 두가지에 비해서 세번째는 필요할때만 의존성을 주입하면 되므로 가장 유연하다.</p>\n<h4>Angular and DI</h4>\n<p>AngularJS 에서는 DI 를 구현하기 위해 비지니스 로직을 별도로 구현해 놓는다. 그리고 필요할 때마다 주입시켜서 사용한다.</p>\n<p>services, directives, filters and animations 등의 컴포넌트에서 DI 가 사용된다. 주입 가능한 factory method 나 생성자를 정의한 다음 Controller 와 같은 곳에 주입시켜 호출한다.</p>\n<p>또한 config 와 run method 역시 어떤 컴포넌트를 주입하여 사용 가능한다.\n몇가지 예를 들어보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 첫번째 방법은 array에 명시\nmodule.controller(&#39;MenuController&#39;, [&#39;$scope&#39;, &#39;menuFactory&#39;, function($scope, menuFactory) {\n\n}]);\n\n// 두번째 방법은 property 추가\nvar MenuController = funciton($scope, menuFactory) {\n\n};\nMenuController.$Inject = [&#39;$scope&#39;, &#39;menuFactory&#39;];\nmodule.controller(&#39;MenuController&#39;, MenuController);\n\n// 세번째 방법은 Implicit annotation\nmodule.controller(&#39;MenuController&#39;, function($scope, menuFactory) {\n\n});</code></pre></div>\n<h4>Angular Factory and Service</h4>\n<p>factory 와 service 는 controller 에 데이터를 제공하기 위한 객체(?)이다. 그리고 아마 백엔드에서 데이터를 주고 받을때 factory 와 service 를 사용하지 않을까 싶다. 해당 내용은 추후 나오니 일단은 factory 와 service 에 집중하자.</p>\n<h4>Angular Services</h4>\n<p>service 는 여러개의 app 에 공통으로 사용되는 데이터 or 메서드를 담고 있다. 그렇기 때문에 DI 를 이용하여 필요한 곳에 주입되어야 하고 Lazily instantiated(필요할 때만 인스턴스화 되어야 함) 되어야 하며 singlton 객체여야한다.</p>\n<p>$http, $scope, $rootScope, $location, $parse, $templateCache, $animate $injector 와 같은 built-in 서비스들이 존재한다. 이외에 개발자가 직접 서비스를 등록할 수도 있는데, service(), factory(), provider(), constant(), value() 등의 메서드를 이용하면 가능하다.</p>\n<h4>Angular Factory</h4>\n<p>factory 는 보통 컨트롤러에 데이터를 제공하는 역할을 한다. factory 에서 미리 데이터와 메서드 셋을 만들어 둔 다음 필요한 컨트롤러에 의존적으로 주입해서 사용한다. 이렇게 보면 service 와 factory 의 차이가 별로 안 느껴지는데, 결정적으로 service 는 초기화 과정이 있기 때문에 prototype 상속이 가능한다. 그래서 보통 상속이 필요한 데이터 or 모델링은 서비스를 이용하고 정적인 메서드나 데이터 같은 경우에는 factory 를 많이 이용한다.</p>\n<p>우선 factory 사용 예를 보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// factory code\nangular.module(&#39;confusionApp&#39;)\n    .factory(&#39;menuFactory&#39;, function() {\n    \tvar menufac = {};\n    \tvar dishes = [ ... ];\n\n    \tmenufac.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tmenufac.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    \t// 객체를 리턴한다.\n    \treturn menufac;\n    });\n\n// usage\nangular.module(&#39;confusionApp&#39;)\n    .controller(&#39;MenuController&#39;, [&#39;$scope&#39;, &#39;menuFactory&#39;, function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);</code></pre></div>\n<p>service 사용과 비교해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// service code\nangular.module(&#39;confusionApp&#39;)\n    .service(&#39;menuFactory&#39;, function() {\n    \t// 객체선언, 리턴이 필요없다.\n    \tvar dishes = [ ... ];\n\n    \tthis.getDishes = function() {\n    \t\treturn dishes;\n    \t};\n\n    \tthis.getDish = function (index) {\n    \t\treturn dishes[index];\n    \t};\n    });\n\n// usage\nangular.module(&#39;confusionApp&#39;)\n    .controller(&#39;MenuController&#39;, [&#39;$scope&#39;, &#39;menuFactory&#39;, function($scope, menuFactory) {\n    \t$scope.dishes = menuFactory.getDishes();\n    }]);</code></pre></div>\n<p>service 와 factory 의 사용법은 완전히 같다. 하지만 차이가 있는데, factory 는 객체를 생성해서 리턴을 한다. 하지만 service 의 경우에는 service() 함수가 호출되면서 기본 생성자가 만들어진다. 그래서 service 코드 내에서 this 로 바로 접근이 가능하기 때문에 별도로 객체를 만들어 리턴해줄 필요가 없다.</p>\n<h4>exercise</h4>\n<p>app.js</p>\n<p>모든 컨트롤러 코드는 controllers.js 로 이동한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;use strict&#39;;\n\nangular.module(&#39;confusionApp&#39;, [])\n\n;</code></pre></div>\n<p>controllers.js</p>\n<p>controller 코드는 모두 controllers.js 로 이동하였고, 데이터를 가져오는 부분은 services.js 로 이동</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;use strict&#39;;\n\nangular.module(&#39;confusionApp&#39;)\n    .controller(&#39;MenuController&#39;, [&#39;$scope&#39;, &#39;menuFactory&#39;, function($scope, menuFactory){\n\n        $scope.tab = 1;\n        $scope.filtText = &#39;&#39;;\n        $scope.showDetails = false;\n\n        $scope.dishes = menuFactory.getDishes();\n\n        ...\n\n    }])\n\n    ...\n\n    .controller(&#39;DishDetailController&#39;, [&#39;$scope&#39;, &#39;menuFactory&#39;, function($scope, menuFactory) {\n        var dish = menuFactory.getDish(3);\n        $scope.dish = dish;\n\n    }])\n\n    ...\n\n    ;</code></pre></div>\n<p>services.js</p>\n<p>데이터 관련 파일은 모두 이쪽으로 이동 (factory / service 메서드 이용)\n아래는 service 를 사용한 예제임.\n그리고 dishdetail.html 에서 사용하던 comment 를 dishes 에 합쳐서 사용\n각 dish 의 comment 속성에 리스트로 선언</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&#39;use strict&#39;;\n\nangular.module(&#39;confusionApp&#39;)\n\t\t.service(&#39;menuFactory&#39;, function() {\n\t        var dishes = [\n\t\t\t\t{\n\t\t\t\t\tname: &#39;Uthapizza&#39;,\n\t\t\t\t\timage: &#39;images/uthapizza.png&#39;,\n\t\t\t\t\tcategory: &#39;mains&#39;,\n\t\t\t\t\tlabel: &#39;Hot&#39;,\n\t\t\t\t\tprice: &#39;4.99&#39;,\n\t\t\t\t\tdescription:&#39;A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer&#39;,\n\t\t\t\t\tcomment: &#39;aaaaaaa&#39;\n\t\t\t\t},\n\n\t\t\t\t...\n\t\t\t];\n\n\t\t\tthis.getDishes = function() {\n\t\t\t\treturn dishes;\n\t\t\t};\n\n\t\t\tthis.getDish = function(index) {\n\t\t\t\treturn dishes[index];\n\t\t\t};\n\n\t\t});</code></pre></div>\n<h3>Angular Templates</h3>\n<p>Angular Tmeplate 은 HTML 과 함께 쓰여진다. 동적 뷰(Dynamic View)를 만들기 위해서는 Angular Template 의 역할이 반드시 필요하다.</p>\n<p>Angular Template 은 Angular JS 의 여러 요소에 사용되었는데, Directives, Markup:{{expression}}, Filter, Form controls 등이 대표적이다.</p>\n<h4>ng-include directive</h4>\n<p>external HTML 조각을 HTML 내에 포함하기 위해 directive 다.\n사용방법은 간단하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div ng-include=&quot;&#39;menu.html&#39;&quot;&gt;&lt;/div&gt;\n&lt;ng-include src=&quot;&#39;menu.html&#39;&quot;&gt;&lt;/ng-include&gt;</code></pre></div>\n<p>두가지 방법이 있다. 태그의 속성으로 사용하거나 ng-include 태그를 사용하는 것이다.</p>\n<p>그리고 한가지 알아두어야 할 점이 있다. ng-include directive 를 사용하면 ng-controller 를 사용할 때처럼 새로운 scope 가 생성된다는 점이다.</p>\n<h4>exercise</h4>\n<p>index.html</p>\n<p>header, footer, js, css 등을 import 하는 부분을 모두 index.html 에 둔다. 그리고 필요한 부분에 menu.html, dishdetail.html, contactus.html 등의 파일을 ng-include 를 이용하여 포함시킨다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; ng-app=&quot;confusionApp&quot;&gt;\n&lt;head&gt;\n\n...\n\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;header class=&quot;jumbotron&quot;&gt;\n\n    \t...\n\n    &lt;/header&gt;\n\n    &lt;ng-include src=&quot;&#39;menu.html&#39;&quot;&gt;&lt;/ng-include&gt;\n\n    &lt;footer class=&quot;row-footer&quot;&gt;\n\n    \t...\n\n    &lt;/footer&gt;\n\n    ...\n\n&lt;/body&gt;\n&lt;/html&gt;</code></pre></div>\n<p>single page application 을 구현하기 위해서는 데이터가 변함에 따라서 ng-include 를 이용하여 동적으로 뷰를 전환할 필요가 있다. 다음 강의를 통해서 각 html 페이지끼리 이동하는 방법에 대해서 배워보도록 하자.</p>","frontmatter":{"title":"[coursera] AngularJS week 3-1","date":"September 02, 2016"}}},"pageContext":{"slug":"/frontend-javascript-framework-angularjs-week3-1/","previous":{"fields":{"slug":"/temp/frontend-javascript-framework-angularjs-week3-1/"},"frontmatter":{"title":"[coursera] AngularJS week 3-1"}},"next":{"fields":{"slug":"/temp/frontend-javascript-framework-angularjs-week3-2/"},"frontmatter":{"title":"[coursera] AngularJS week 3-2"}}}}