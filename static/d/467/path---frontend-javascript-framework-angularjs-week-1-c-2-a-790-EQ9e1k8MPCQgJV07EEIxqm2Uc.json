{"data":{"site":{"siteMetadata":{"title":"bono's blog","author":"bono"}},"markdownRemark":{"id":"a689c2c8-2367-5b9b-97fd-bc34af209c92","excerpt":"Full-Stack Web Development: The Big Picture Three Tier Architecture 보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다. Presentaion Layer : HTML, CSS…","html":"<h2>Full-Stack Web Development: The Big Picture</h2>\n<h3>Three Tier Architecture</h3>\n<p>보통 웹개발에서 말하는 3-티어 아키텍쳐는 아래의 세 영역으로 나뉜다.</p>\n<ul>\n<li>Presentaion Layer : HTML, CSS, JS</li>\n<li>Business Layer : Ruby, Python, Java, C++</li>\n<li>Data Access Layer : DBMS</li>\n</ul>\n<p>반면에 Full-Stack 웹 개발은 자바스크립트를 이용하여 위의 세 layer 의 개발을 가능하도록 하는 방법을 말하며, 조금씩 다른 프레임웍을 사용할 수 있겠지만, 이 강의에서는 presentaion layer 에는 자바스크립트 프레임웍인 AngularJS, business layer 에서는 NodeJS, 그리고 Data Access Layer 영역에서는 자바스크립트를 이용한 MongoDB 를 사용하여 개발한다.</p>\n<p>이 세 영역은 모두 자바스크리트 기반으로 만들어져 있기 때문에 서버, 브라우저, 모바일 디바이스 등 모든 영역에서 JSON 형태로 통신이 가능하다.</p>\n<h3>Course Overview</h3>\n<p>이번 강의에서 다루는 주제는 다음과 같다.</p>\n<ul>\n<li>AngularJS : 자바스크립트 프레임워크 (버전: 1.4.2)</li>\n<li>Web Tools : Grunt, Gulp, Yo and Yeoman</li>\n</ul>\n<h2>Introduction to AngularJS</h2>\n<h3>Front-End JavaScript Frameworks OverView</h3>\n<blockquote>\n<p>소프트웨어 라이브러리란 어떤 동작을 실행하는 잘 정의된 인터페이스(or functions or methods)의 집합이라 할 수 있다. 재사용성과 모듈화를 통해서 더 효율적인 개발이 가능하다. 대표적인 예로 jQuery 가 있다.</p>\n</blockquote>\n<blockquote>\n<p>소프트웨어 프레임워크란 라이브러리와는 다소 차이가 있다. 라이브러리는 이미 잘 만들어진 유용한 코드(functions)를 사용한다고 한다면, 프레임워크는 개발자가 작성한 코드가 프레임워크안에서 적절하게 실행할 수 있도록 환경을 제공하는 것이라 할 수 있다. 프레임워크는 일반적인(generic) 함수 셋을 제공하며 개발자가 구체적인 코드를 구현해야한다. 그리고 구현된 코드는 프레임워크가 필요한 경우, 어떤 임무를 완수하기 위해 불려진다. 즉, 라이브러리는 개발자에게 코드를 컨트롤 할 수 있는 권한이 주어지는 반면 프레임워크는 코드의 컨트롤 권한이 프레임워크에게 있는 것과 같다. 이번 강의에서 배울 AngularJS 나 durandal, backbone 등이 대표적이다.</p>\n</blockquote>\n<h4>10 가지 Javascript Framework</h4>\n<ul>\n<li>Angular : one of the three Major JS framework</li>\n<li>Ember : one of the three Major JS framework</li>\n<li>Backbone : one of the three Major JS framework</li>\n<li>React : 프레임웍이라기 보다 라이브러리에 가까움</li>\n<li>Aurelia</li>\n<li>Meteor : 요즘 각광받기 시작</li>\n<li>Polymer</li>\n<li>Knockout</li>\n<li>Vue</li>\n<li>Mercury</li>\n</ul>\n<h4>3 가지 메이저 JS Frameworks 비교 (3 > 2 > 1)</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"center\">Ember</th>\n<th align=\"center\">Angular</th>\n<th align=\"center\">Backbone</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Opinionated</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"left\">Ease of Use</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">Learning Curve</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"left\">Popularity</td>\n<td align=\"center\">-</td>\n<td align=\"center\">3</td>\n<td align=\"center\">-</td>\n</tr>\n</tbody>\n</table>\n<h3>Introduction to AngularJS</h3>\n<p>HTML 은 static 한 문서이기 때문에 동적인 웹 어플리케이션을 지원하기에는 HTML 만으로는 한계가 있다. 보통은 자바스크립트의 DOM 객체를 이용해서 HTML 을 동적으로 만들 수 있지만, 자바스크립트 프레임웍인 Angular 를 이용하면 다음과 같은 이점을 가질 수 있다.</p>\n<blockquote>\n<p>Solving the impedance mismatch</p>\n</blockquote>\n<p>back end 데이터와 static content 를 출력하는데 HTML 만으로는 한계가 있기 때문에 이 문제(impedance mismatch)를 해결이 가능하도록 해준다.</p>\n<blockquote>\n<p>Designed with CRUD applications (data-driven) in mind</p>\n</blockquote>\n<p>데이터가 변경되면 변경된 데이터에 맞춰서 동적으로 HTML 이 update 된다. Create, Read, Update, Delete 이 네 가지를 이르는 CRUD 에 대해서는 다음 모듈에서 자세하게 다루기로 한다.</p>\n<blockquote>\n<p>Declarative approach</p>\n</blockquote>\n<p>Angular 는 선언적인 개발방법을 지원하는데, 이는 개발자가 원하는 것을 기술하면 Angluar 가 그에 맞게 처리해내는 것을 뜻한다(무슨 말인지 잘…)</p>\n<h4>Angular Vocabulary</h4>\n<p>앞으로 배울 Angular 의 문법은 아래와 같은 것들이 있다.</p>\n<ul>\n<li>Two-way Data Binding</li>\n<li>Scope</li>\n<li>Directives</li>\n<li>Templates</li>\n<li>Routing</li>\n<li>Testing</li>\n<li>Modules</li>\n<li>Controllers</li>\n<li>Filters</li>\n<li>Factory</li>\n<li>Service</li>\n<li>Provider</li>\n</ul>\n<p>우선은 Two-way Data Binding 과 Directives 에 대해서 먼저 알아보자</p>\n<h4>Directives</h4>\n<p>Angular Directives 는 ng-_ or data-ng-_ 로 시작하는 HTML 속성이다. 다음의 몇가지 예를 살펴보자</p>\n<ul>\n<li>\n<p>ng-app : Angular 앱을 시작과 끝을 나타낸다. 어떠한 태그에도 붙일 수 있다. 즉, 하나의 HTML 파일에 하나 이상의 Angular 앱이 존재할 수도 있다는 말과 같다.</p>\n</li>\n<li>\n<p>ng-init : 자바스크립트 변수를 선언하는것과 같다. Angular expression 을 Evaluation 한다(좀더 매끄러운 한글 표현이 필요할 것 같다). object, array 도 사용가능하다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p ng-init=&quot;index=1&quot;&gt;&lt;/p&gt;\n&lt;div ng-init=&quot;dish={name:&#39;example&#39;, ...}&quot;&gt;&lt;/div&gt;</code></pre></div>\n<ul>\n<li>ng-model : input value 를 변수로 바인드 한다. (Two-way data binding) ng-model 속성을 부여하면 언제든지 어떤 변수든지 변경이 가능하게 된다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;Comment: {{dish.comment}}&lt;/p&gt;\n&lt;p&gt;Type your comment:\n\t&lt;input type=&quot;text&quot; ng-model=&quot;dish.comment&quot; /&gt;\n&lt;/p&gt;</code></pre></div>\n<p>dish object 의 comment 는 위에서 이미 정의를 한 상태다. 이때 아래의 input tag 에서 ng-model 속성을 부여하고 이미 정의된 dish.comment 를 입력하면 Two-way data binding 에 의해 처음 설정된 값이 input 태그의 변경되는 값으로 동적으로 변경된다.</p>\n<p>양 방향에서 바인딩이 가능하기 때문에 아마도 Two-way data binding 이라고 부르는 것 같다.</p>\n<ul>\n<li>ng-repeat : 반복적인 태그를 작성할 필요가 있을때 사용할 수 있다.</li>\n</ul>\n<h4>Angular Expressions</h4>\n<ul>\n<li>\n<p>Evaluated against an Angular scope object\nAngular 스코프에 맞게 value 가 평가된다.</p>\n</li>\n<li>\n<p>No conditionals, loops, or exceptions\n위의 사항들은 expression 으로 사용이 불가하다.</p>\n</li>\n<li>\n<p>Expressions enclosed in {{ expression }}\n중괄호 두개를 겹쳐서 사용한다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;p&gt;6 + 5 = {{ 6 + 5 }}&lt;/p&gt;\n&lt;h2&gt;{{ dish.name }}&lt;/h2&gt;</code></pre></div>\n<h2>Models, Views and Controllers</h2>\n<h3>The Model View Controller Framework</h3>\n<blockquote>\n<p>Design pattern is ell-documented solution to a recurring problem</p>\n</blockquote>\n<p>디자인 패턴은 비슷하고 반복되는 문제를 매번 똑같이 구현하는 것이 아니라 재사용 가능하도록 만들어진 일종의 솔루션을 말한다.</p>\n<h4>MVC</h4>\n<p>MVC 는 소프트웨어 엔지니어링 구조에서 가장 대표적인 디자인 패턴이다. M(Model), V(View), C(Controller) 세가지 영역으로 나누어져있고, 각 영역은 독립적으로 존재한다.</p>\n<ul>\n<li>\n<p>Model : 애플리케이션에서 도메인의 상태나 도메인 로직을 구현하는 영역이다. 여기서 말하는 도메인은 일반 개발 영역에서 말하는 것과 마찬가지로 소프트웨어가 다루는 특정 활동이나 지식의 범주를 뜻한다(표현이 조금 어렵다). 웹 어플리케이션단에서 보면 model 은 request 요청에 대한 상태 변화에 반응하여 특정 도메인의 행위나 상태를 관리한다고 볼 수 있다. 그리고 대게 모델의 변화는 컨트롤러에 의해 발생한다.</p>\n</li>\n<li>\n<p>View : 사용자에게 보여지는 영역이다. view 는 유저와 상호작용을 위해 form 에 모델정보를 redering 한다. 하나의 model 로 서로 다른 목적의 뷰를 만들수도 있다.</p>\n</li>\n<li>\n<p>Controller : View 와 모델 사이를 중재하는 역할을 한다. 일반적으로 컨트롤러는 유저의 input 을 받아서 모델의 상태변화를 만들어낸다. 그렇기 때문에 컨트롤러는 결과적으로 모델의 변화를 이끌어 낸다고 할 수 있다.</p>\n</li>\n</ul>\n<h4>MVVM (Model View View-Model)</h4>\n<p>MVC 패턴의 파생된 형태중 하나인 MVVM 은 Model, View, View-Model 로 구성된다. 컨트롤러에 들어갈 비즈니스 로직이 모델이 있으며 View-Model 과 View 사이에서 데이터 바인딩이 이루어진다.</p>\n<h3>Angular Modules and Controllers</h3>\n<p>일반적으로 Angular 도 MVC 패턴을 따르고 있다고 할 수 있지만, 어떤 사람들은 Angular 가 MVVM 이 적합하다고도 한다. 또한 많은 사람들은 모델(M)과 뷰(V), 그리고 그 사이는 무엇이든 상관없다는 MVW(model-view-whatever)로 간단히 부르기도 한다.</p>\n<h4>Angular Modules</h4>\n<p>Angular Modules 은 다음처럼 스크립트 태그안에 정의한다. angular.module 메서드는 두개의 파라미터를 가지는데, 첫번째는 ngApp 속성에 정의된 이름이고 두번째는 array 인데 나중에 설명할 것이다. 아래같은 경우 ngApp 이 html 태그에 선언되어 있으므로 아래의 모듈에서 현재 페이지 모두를 관리 할 수 있게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;html ngApp=&quot;confusionApp&quot;&gt;\n\n...\n\n&lt;body&gt;\n\n...\n\n\t&lt;script&gt;\n\t\tvar app = angular.module(&#39;confusionApp&#39;,[]);\n\t&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre></div>\n<h4>Angular Controller</h4>\n<p>Angular 컨트롤러는 특정 태그의 ng-controller 속성으로 선언된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=&quot;row row-content&quot; ng-controller=&quot;menuController as menuCtrl&quot;&gt;\n\n&lt;/div&gt;\n\n&lt;script&gt;\nvar app = angular.module(&#39;confusionApp&#39;, []);\n\napp.controller(&#39;menuController&#39;, function() {\n\tvar dishes = [item, ... ];\n\tthis.dishes = dishes;\n});\n\n&lt;/script&gt;</code></pre></div>\n<p>모듈과 컨트롤러는 위와 같이 구현할 수 있다. 이전에 보았던 ng-init directive 는 HTML 속성으로 직접 넣어줘야하지만, 컨트롤러를 사용하면 해당 태그(여기서는 div) 내부의 데이터를 자바스크립트 코드로 컨트롤할 수 있게 된다. 컨트롤러의 두번째 파라미터인 익명함수 마지막에 <strong>this.dishes = dishes</strong> 부분은 아마도 div 태그 내에서 사용가능한 dishes 를 정의해주기 위해 자바스크립트 오브젝트인 dishes 를 this.dishes 에 할당해준게 아닌가 생각된다.</p>\n<h2>Angular Filters</h2>\n<p>필터는 서버사이드 또는 클라이언트에서 만들어진 data 를 end user 에게 잘 표현하기 위한 수단으로 사용된다. 필터는 기반 데이터를 바꿀 수는 없으며 view templates, controllers, services 등에서 사용된다. AngularJS 는 기본적으로 빌트인 필터를 여러개 제공하고 있고, 개발자 필요에 따라 커스텀 필터를 만들어 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;div class=&quot;media-body&quot;&gt;\n\t&lt;h2 class=&quot;media-headgin&quot;&gt;{{dish.name}}\n\t\t&lt;span class=&quot;label label-danger label-xs&quot;&gt;{{dish.label}}&lt;/span&gt;\n\t\t&lt;!-- currency 필터는 price에 $를 붙여준다.--&gt;\n\t\t&lt;span class=&quot;badge&quot;&gt;{{dish.price | currency}}&lt;/span&gt;\n\t&lt;/h2&gt;\n\t&lt;p&gt;{{dish.description}}&lt;/p&gt;\n&lt;/div&gt;</code></pre></div>\n<h4>Angluar 의 Built-in Filters</h4>\n<ul>\n<li>uppercase / lowercase : converts the text</li>\n<li>currency : $를 붙여준다.</li>\n<li>date : 날짜 포맷을 변경한다.</li>\n<li>filter : 특정 조건에 맞게 array 의 서브셋을 리턴한다.</li>\n<li>orderBy : 조건에 맞게 정렬한다.</li>\n<li>json, limitTo 등도 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!-- filter 예제, HTML 코드 --&gt;\n&lt;li class=&quot;media&quot; ng-repeat=&quot;dish in menuCtrl.dishes | filter:menuCtrl.filtText&quot;&gt;...&lt;/li&gt;\n\n&lt;!-- javascript 코드 --&gt;\nvar filtText = &quot;&quot;;\n\nthis.select = function(setTab) {\n\tthis.tab = setTab;\n\tif (setTab === 2)\n\t\tthis.filtText = &quot;appetizer&quot;\n\telse if (setTab === 3)\n\t\tthis.filtText = &quot;mains&quot;\n\telse if (setTab === 4)\n\t\tthis.filtText = &quot;dessert&quot;\n\telse\n\t\tthis.filtText = &quot;&quot;\n}</code></pre></div>\n<p>위와 같이 HTML 과 javascript 코드를 작성한다.\n그리고 특정 탭을 만들어 각 탭에 번호를 부여한다(setTab).\n그럼 각 탭 을 눌렀을때 filtText 가 특정 문자열로 변경된다.\n미리 적용해놓은 filter 에 따라서 각 li 태그가 보여지기도 하고 가려지기도 할 것이다.</p>\n<h2>Excercise Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;en&quot; ng-app=&quot;confusionApp&quot;&gt;\n\n&lt;head&gt;\n     &lt;meta charset=&quot;utf-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;\n    &lt;!-- The above 3 meta tags *must* come first in the head; any other head\n         content must come *after* these tags --&gt;\n    &lt;title&gt;Ristorante Con Fusion: Menu&lt;/title&gt;\n        &lt;!-- Bootstrap --&gt;\n    &lt;link href=&quot;../bower_components/bootstrap/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;../bower_components/bootstrap/dist/css/bootstrap-theme.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;../bower_components/font-awesome/css/font-awesome.min.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;styles/bootstrap-social.css&quot; rel=&quot;stylesheet&quot;&gt;\n    &lt;link href=&quot;styles/mystyles.css&quot; rel=&quot;stylesheet&quot;&gt;\n\n    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;\n    &lt;!-- WARNING: Respond.js doesn&#39;t work if you view the page via file:// --&gt;\n    &lt;!--[if lt IE 9]&gt;\n      &lt;script src=&quot;https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js&quot;&gt;&lt;/script&gt;\n      &lt;script src=&quot;https://oss.maxcdn.com/respond/1.4.2/respond.min.js&quot;&gt;&lt;/script&gt;\n    &lt;![endif]--&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;div class=&quot;container&quot;&gt;\n        &lt;div class=&quot;row row-content&quot; ng-controller=&quot;menuController as menuCtrl&quot;&gt;\n            &lt;div class=&quot;col-xs-12&quot;&gt;\n                &lt;ul class=&quot;nav nav-tabs&quot; role=&quot;tablist&quot;&gt;\n                    &lt;li role=&quot;presentation&quot; ng-class=&quot;{active:menuCtrl.isSelected(1)}&quot;&gt;\n                        &lt;a ng-click=&quot;menuCtrl.select(1)&quot; aria-controls=&quot;all menu&quot; role=&quot;tab&quot;&gt;The Menu&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li role=&quot;presentation&quot; ng-class=&quot;{active:menuCtrl.isSelected(2)}&quot;&gt;\n                        &lt;a ng-click=&quot;menuCtrl.select(2)&quot; aria-controls=&quot;appetizers&quot; role=&quot;tab&quot;&gt;Appetizers&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li role=&quot;presentation&quot; ng-class=&quot;{active:menuCtrl.isSelected(3)}&quot;&gt;\n                        &lt;a ng-click=&quot;menuCtrl.select(3)&quot; aria-controls=&quot;mains&quot; role=&quot;tab&quot;&gt;Mains&lt;/a&gt;\n                    &lt;/li&gt;\n                    &lt;li role=&quot;presentation&quot; ng-class=&quot;{active:menuCtrl.isSelected(4)}&quot;&gt;\n                        &lt;a ng-click=&quot;menuCtrl.select(4)&quot; aria-controls=&quot;desserts&quot; role=&quot;tab&quot;&gt;Desserts&lt;/a&gt;\n                    &lt;/li&gt;\n                &lt;/ul&gt;\n                &lt;div class=&quot;tab-content&quot;&gt;\n                    &lt;ul class=&quot;media-list tab-pane fade in active&quot;&gt;\n                        &lt;li class=&quot;media&quot; ng-repeat=&quot;dish in menuCtrl.dishes | filter:menuCtrl.filtText&quot;&gt;\n                            &lt;div class=&quot;media-left media-middle&quot;&gt;\n                                &lt;a href=&quot;#&quot;&gt;\n                                &lt;img class=&quot;media-object img-thumbnail&quot; ng-src=&quot;{{dish.image}}&quot; alt=&quot;Uthapizza&quot;&gt;\n                                &lt;/a&gt;\n                            &lt;/div&gt;\n                            &lt;div class=&quot;media-body&quot;&gt;\n                                &lt;h2 class=&quot;media-heading&quot;&gt;{{dish.name}}\n                                    &lt;span class=&quot;label label-danger&quot;&gt;{{dish.label}}&lt;/span&gt;\n                                    &lt;span class=&quot;badge&quot;&gt;{{dish.price | currency}}&lt;/span&gt;\n                                &lt;/h2&gt;\n                                &lt;p&gt;{{dish.description}}&lt;/p&gt;\n                                &lt;!-- &lt;p&gt;Comment: {{dish.comment}}&lt;/p&gt; --&gt;\n                                &lt;!-- &lt;p&gt;Type your comment: --&gt;\n                                    &lt;!-- &lt;input type=&quot;text&quot; ng-model=&quot;dish.comment&quot;&gt; --&gt;\n                                &lt;/p&gt;\n                            &lt;/div&gt;\n                        &lt;/li&gt;\n                    &lt;/ul&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script src=&quot;../bower_components/angular/angular.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script&gt;\n        var app = angular.module(&#39;confusionApp&#39;, []);\n        app.controller(&#39;menuController&#39;, function(){\n\n            this.tab = 1;\n            this.filtText = &#39;&#39;;\n\n            var dished = [\n                              {\n                                name: &#39;Uthapizza&#39;,\n                                image: &#39;images/uthapizza.png&#39;,\n                                category: &#39;mains&#39;,\n                                label: &#39;Hot&#39;,\n                                price: &#39;4.99&#39;,\n                                description:&#39;A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer&#39;,\n                                comment: &#39;aaaaaaa&#39;\n                              },\n                              {\n                                name: &#39;Uthapizza2&#39;,\n                                image: &#39;images/zucchipakoda.png&#39;,\n                                category: &#39;mains&#39;,\n                                label: &#39;&#39;,\n                                price: &#39;4.99&#39;,\n                                description:&#39;A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer&#39;,\n                                comment: &#39;&#39;\n                              },\n                              {\n                                name: &#39;Uthapizza3&#39;,\n                                image: &#39;images/vadonut.png&#39;,\n                                category: &#39;appetizer&#39;,\n                                label: &#39;New&#39;,\n                                price: &#39;4.99&#39;,\n                                description:&#39;A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer&#39;,\n                                comment: &#39;&#39;\n                              },\n                              {\n                                name: &#39;Uthapizza4&#39;,\n                                image: &#39;images/elaicheesecake.png&#39;,\n                                category: &#39;dessert&#39;,\n                                label: &#39;&#39;,\n                                price: &#39;4.99&#39;,\n                                description:&#39;A unique combination of Indizan Uthappam (pancake) and Italian pizza, topped with Cerignola olives, ripe vine cherry tomatoes, Vidalia onion, Guntur chillies and Buffalo Paneer&#39;,\n                                comment: &#39;&#39;\n                              },\n                            ];\n            this.dishes = dished;\n\n            this.select = function(setTab) {\n                this.tab = setTab;\n\n                if (setTab === 2)\n                    this.filtText = &quot;appetizer&quot;;\n                else if (setTab === 3)\n                    this.filtText = &quot;mains&quot;\n                else if (setTab === 4)\n                    this.filtText = &quot;dessert&quot;\n                else\n                    this.filtText = &quot;&quot;;\n            }\n\n            this.isSelected = function(checkTab) {\n                return (this.tab === checkTab)\n            }\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;</code></pre></div>","frontmatter":{"title":"[coursera] AngularJS week 1","date":"August 18, 2016"}}},"pageContext":{"slug":"/frontend-javascript-framework-angularjs-week1/","previous":{"fields":{"slug":"/temp/frontend-javascript-framework-angularjs-week1/"},"frontmatter":{"title":"[coursera] AngularJS week 1"}},"next":{"fields":{"slug":"/temp/frontend-javascript-framework-angularjs-week2-1/"},"frontmatter":{"title":"[coursera] AngularJS week 2-1"}}}}