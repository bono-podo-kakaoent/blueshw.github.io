{"data":{"site":{"siteMetadata":{"title":"bono's blog","author":"bono"}},"markdownRemark":{"id":"f0e510f2-2c5b-5619-abc6-d64a7ec26a27","excerpt":"6.1 Other Collections 이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자. Vector 리스트의 경우에는 첫번째 element…","html":"<h2>6.1 Other Collections</h2>\n<p>이제껏 리스트에 대해서 알아보았다. 이번 챕터에서는 리스트 외에도 스칼라의 기본적인 컬렉션(Seq, Set, Map)에 대해 알아보도록 하자.</p>\n<h3>Vector</h3>\n<p>리스트의 경우에는 첫번째 element 에 접근하는게 마지막 element 에 접근하는 것보다 훨씬 빠르다. 리스트의 구조가 트리 형태로 구성되어 있고 우측으로 갈수록 트리의 깊이가 깊어지기 때문에 그렇다. 이에 반해 Vector 는 리스트 보다 access pattern 이 훨씬 균형잡혀 있다.</p>\n<p>벡터는 최초에 2^5(32 개)의 원소를 가지는 array 가 만들어 진다. 32 개가 넘는 원소가 필요하게 되면, 그다음은 32 개를 추가로 만드는 것이 아니라, 2^5 * 2^5 개, 그러니깐 총 2^10(1024 개)의 원소가 들어갈 수 있는 리스트가 추가로 만들어 지는 것이다. 왜 이런식으로 커질까? 원소가 32 개보다 커지면, 처음 만들어진 32 개짜리 벡터는 각각의 32 개짜리 원소를 가지는 벡터의 포인터가 되고 그 아래로 각각 벡터가 만들어진다. 즉, 처음 32 개짜리 원소에서 1024 개를 담을 수 있는 벡터로 바뀌게 된다. 그렇기 때문에 어떤 값을 찾는데 log32(N) 시간만 소요된다. 리스트보다 훨 낫다.</p>\n<p>또 다른 장점으로는 map, for, filter, fold 와 같은 연산(bulk operations)이 빠르다는 것이다. 왜냐하면 벡터는 리스트와 달리 원소가 32 개가 하나의 묶음이다보니 a single cache line 에 위치하기 때문에 접근이 훨씬 빠를것이기 때문이다. 즉 list 는 vector 에 비해서 locality 가 나쁘다고 할 수 있다.</p>\n<p>vector 가 이렇게 좋다는데, list 를 써야하는 이유는 무엇일까? recursive data structure 의 head 를 취하고 나머지를 다시 연산하는 모델 안에서는 list 가 훨씬 쉽다. 왜냐하면 한 노드에 하나의 아이템만 존재하기 때문에 head 를 취하기가 훨씬 쉽기 때문이다. 하지만 vector 의 경우 depth 가 1 일때는 몰라도 depth 가 1 만 더 증가해도 훨씬 복잡해진다.</p>\n<p>list 의 concat 연산 (::)은 vector 에서 다음과 같이 쓰인다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">x <span class=\"token operator\">+</span><span class=\"token operator\">:</span> xs     <span class=\"token comment\">// xs 앞에 x를 포함하는 새로운 벡터를 붙인다.</span>\nxs <span class=\"token operator\">:</span><span class=\"token operator\">+</span> x     <span class=\"token comment\">// xs 뒤에 x를 포함하는 새로운 벡터를 붙인다.</span></code></pre></div>\n<p>벡터 또한 immutable 하기 때문에 위의 연산을 처리하기 위해서는 기존의 벡터를 새롭게 만들어지는 벡터와 함께 새로운 포인터에 연결해야한다. root 까지 새로운 포인터로 연결이 되고 나면 연산이 완료된다.</p>\n<h3>Collection Hierachy</h3>\n<p>스칼라의 collection 은 크게 세가지로 나뉘는데, 하나는 지금껏 살펴봤던 List 와 Vector 가 속하는 Seq, 나머지는 Set 과 Map 이다.</p>\n<p><img src=\"http://docs.scala-lang.org/resources/images/collections.immutable.png\" alt=\"Collectino Hierachy\"></p>\n<p>Array 와 String 는 점선으로 되어있는데, 이들도 Seq 로써 아래와 같이 똑같이 동작한다. 다만 자바에서 가져온 타입이기 때문에 앞으로 어떻게 될지(Scala.sequence.String 같은걸 누군가 만들지도 모르므로..) 몰라 점선으로 연결해놓은거 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// Array</span>\n<span class=\"token keyword\">val</span> xs <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">44</span><span class=\"token punctuation\">)</span>\nxs map <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">=></span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// res0 : Array[Int] = Array(2, 4, 6, 88)</span>\n\n<span class=\"token comment\">// String</span>\n<span class=\"token keyword\">val</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World\"</span>\ns filter <span class=\"token punctuation\">(</span>c <span class=\"token keyword\">=></span> c<span class=\"token punctuation\">.</span>isUpper<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// res1: String = HW</span></code></pre></div>\n<h3>Range</h3>\n<p>Range 는 심플한 seq 타입이다. 사용법 또한 매우 간단하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> r<span class=\"token operator\">:</span> Range <span class=\"token operator\">=</span> <span class=\"token number\">1</span> until <span class=\"token number\">5</span>    <span class=\"token comment\">// 1, 2, 3, 4</span>\n<span class=\"token keyword\">val</span> s<span class=\"token operator\">:</span> Range <span class=\"token operator\">=</span> <span class=\"token number\">1</span> to <span class=\"token number\">5</span>     <span class=\"token comment\">// 1, 2, 3, 4, 5</span>\n<span class=\"token number\">1</span> to <span class=\"token number\">10</span> by <span class=\"token number\">3</span>          <span class=\"token comment\">// 1, 4, 7, 10</span>\n<span class=\"token number\">6</span> to <span class=\"token number\">1</span> by <span class=\"token operator\">-</span><span class=\"token number\">2</span>          <span class=\"token comment\">// 6, 4, 2</span></code></pre></div>\n<h3>Some more Sequence Operations</h3>\n<ul>\n<li>\n<p>xs exists p : p 함수의 조건을 만족하는 원소가 있는지</p>\n</li>\n<li>\n<p>xs forall p : 모든 원소가 p 함수의 조건을 만족하는지</p>\n</li>\n<li>\n<p>xs zip ys : 두 collection 의 원소를 pair 로 가지는 새로운 collection 생성, 타입은 xs</p>\n</li>\n<li>\n<p>xs.unzip : zip 형태의 collection 을 분해해서 List 의 tuples 을 만듦, Array 는 안되는군각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다.</p>\n</li>\n<li>\n<p>xs.flatMap f : 모든 element 에 collection-valued functino f 를 적용</p>\n</li>\n<li>\n<p>xs.sum : numeric collection 의 요소들의 합</p>\n</li>\n<li>\n<p>xs.product : numeric collection 의 요소들의 곱</p>\n</li>\n<li>\n<p>xs.max : 최고값</p>\n</li>\n<li>\n<p>xs.min : 최소값</p>\n</li>\n</ul>\n<h3>Scalar Product</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> a<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> b<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5.0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> scalarProduct<span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ys<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span>xs zip ys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>xy <span class=\"token keyword\">=></span> xy<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">*</span> xy<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum\n\nscalarProduct<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> scalarProduct2<span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ys<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span>xs zip ys<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> x <span class=\"token operator\">*</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>sum\n\nscalarProduct2<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span></code></pre></div>\n<p>두 벡터의 각 요소끼리 곱한다음 모든 값을 합하는 함수이다. 우선 xs 와 ys 를 zip 으로 묶은 다음 각 요소(xy: pair)의 첫번째와 두번째 요소를 곱한다음 모든값을 sum 해준다. map 안의 함수는 case 문으로 대체할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">case</span> p1 <span class=\"token keyword\">=></span> e1 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">case</span> pn <span class=\"token keyword\">=></span> en<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 위와 동일</span>\nx <span class=\"token keyword\">=></span> x <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">case</span> p1 <span class=\"token keyword\">=></span> e1 <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">case</span> pn <span class=\"token keyword\">=></span> en <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>isPrime</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> isPrime<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">2</span> until n<span class=\"token punctuation\">)</span> forall <span class=\"token punctuation\">(</span>x <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">%</span> x<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>2 부터 n 전까지의 수가 모두 n 으로 나누어 떨어지지 않으면 n 을 prime number(소수)라 할 수 있다.</p>\n<h2>6.2 Combinatorial Search and For-Expressions</h2>\n<p>양수 n 이 있고, 또다른 양수 i 와 j 가 1 &#x3C;= j &#x3C; i &#x3C; n 을 만족하고 i + j 가 소수라는 조건이 있다.\n코드로 나타내면 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> n <span class=\"token operator\">=</span> <span class=\"token number\">7</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until n<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until i<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>j <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// result</span>\nres0<span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>IndexedSeq<span class=\"token punctuation\">[</span>scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span>Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>음.. 분명 Range 타입을 사용하였는데 결과는 Vector of Vectores 가 나왔다.\nRange 는 Seq 의 하위 타입이지만 사실 그 중간에 IndexedSeq 라는 타입이 존재한다. 결과값으로 pair 가 나왔으므로, Range 타입에는 결과값을 담을 수 없다. 그래서 일단 바로 위의 상위 타입인 IndexedSeq 타입 중에서 pair 를 담을 가장 적합한 타입인 Vector 가 선택되어 나타난것이다.</p>\n<p>원래 우리가 찾으려고 했던 결과는 Vector 의 Vector 가 아니라 pair 를 하나의 single list 에 담아져야 한다. 그래서 모든 sub-sequences 를 foldRight 와 ++를 이용해서 결합할 필요가 있다. (xss: seq of seq)</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token punctuation\">(</span>xss foldRight Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>_ <span class=\"token operator\">++</span> _<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// equvalently</span>\nxss<span class=\"token punctuation\">.</span>flatten\n\n<span class=\"token comment\">// so, 원래식 포함해서 아래와 같이 나타낼 수 있다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until n<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until i<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>j <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatten\n\n<span class=\"token comment\">// 아래의 법칙을 이용하면</span>\nxs flatMap f <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>xs map f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>flatten\n\n<span class=\"token comment\">// 더 간단해질 수 있다.</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until n<span class=\"token punctuation\">)</span> flatMap <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until i<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>j <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// result</span>\nres0<span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 두 합이 prime인것만 추려야함, 이전 챕터에서 만든 isPrime 이용</span>\n<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until n<span class=\"token punctuation\">)</span> flatMap <span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> until i<span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>j <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> filter <span class=\"token punctuation\">(</span>pair <span class=\"token keyword\">=></span> isPrime<span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">.</span>_1 <span class=\"token operator\">+</span> pair<span class=\"token punctuation\">.</span>_2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// result</span>\nres0<span class=\"token operator\">:</span> scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>immutable<span class=\"token punctuation\">.</span>IndexedSeq<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Vector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>For-Expression</h3>\n<p>for loop 에 대해서 알아보자</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Person<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> age<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 20살 이상인 사람만 가져오고 싶을때</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">&lt;-</span> persons <span class=\"token keyword\">if</span> p<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> p<span class=\"token punctuation\">.</span>name\n\n<span class=\"token comment\">// 아래와 같음</span>\npersons filter <span class=\"token punctuation\">(</span>p <span class=\"token keyword\">=></span> p<span class=\"token punctuation\">.</span>age <span class=\"token operator\">></span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span> map <span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></code></pre></div>\n<p>기본적인 for loop 동작은 비슷하지만 결정적인 차이가 하나 있다. 보통 절차적 언어의 for loop 는 어떤 요소가 변할 수 있는 side effect 가 존재하지만 스칼라에서는 yield 키워드를 이용해서 iterable 객체를 생성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> e</code></pre></div>\n<p>for-expression 을 위와같이 단순화 시킬 수 있다.</p>\n<blockquote>\n<p>s is a sequence of generators and filters\ne is an expression whose value is returned by an iteration</p>\n</blockquote>\n<ul>\n<li>generator 의 p &#x3C;- e 에서 p 는 하나의 패턴이고, e 는 컬렉션의 값이다.</li>\n<li>filter 의 f 는 boolean expression 이다.</li>\n<li>몇개의 generator 가 있을때는 마지막이 처음보다 빠르다. why?</li>\n<li>( s )는 { s }처럼 사용할 수도 있다.</li>\n</ul>\n<h3>example</h3>\n<p>이전에 보았던 문제를 for loop 를 이용해 다시 만들어 보자.\n첫번째는 바로 전에 했던 두 수의 합이 prime 넘버인 것의 pair 를 구하는 함수</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n  i <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> until n\n  j <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> until i\n  <span class=\"token keyword\">if</span> isPrime<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span></code></pre></div>\n<p>매우 심플해졌다.</p>\n<p>두번째는 scalarProduct</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> scalarProduct<span class=\"token punctuation\">(</span>xs<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ys<span class=\"token operator\">:</span> Vector<span class=\"token punctuation\">[</span><span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Double</span> <span class=\"token operator\">=</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> xs zip ys<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> x <span class=\"token operator\">*</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sum</code></pre></div>\n<p>따로 필터링할 조건이 없으므로 모든 요소에 대해서 적용한다.</p>\n<h2>6.3 Combinatorial Search Example</h2>\n<p>이번 챕터에서는 Set 에 대해 알아보자.\nSet 도 Seq 와 마찬가지로 Iterable 의 subclass 다. 그래서 Seq 에서 사용하는 대부분의 연산(map, filter 등)을 Set 에서도 동일하게 사용할 수 있다.</p>\n<h3>Sets vs Sequences</h3>\n<ul>\n<li>Set 은 unordered 하다.</li>\n<li>Set 은 중복되는 element 를 가질 수 없다.</li>\n<li>Set 의 fundamental operation 은 요소가 해당 Set 에 포함되는지 확인하는 contains 다.</li>\n</ul>\n<h3>Example: N-Queens</h3>\n<p>예제를 살펴보자.\n체스보드에 서로 위협이 되지 않는 8 개의 퀸을 놓는 방법을 찾는 문제이다. 다르게 말하면 같은 row, column, diagonal 에 둘 수 없는 문제와 같다.</p>\n<p>알고리즘을 살펴보자.</p>\n<ul>\n<li>사이즈 n 인 보드에 k-1 개의 퀸이 놓여진 모든 솔루션 추출</li>\n<li>각 솔루션을 0 에서 n-1 까지의 columns 숫자로 구성된 리스트로 변환</li>\n<li>리스트의 첫번째 요소는 k-1 번째 row 가 될 것이고, k-2, k-3 …의 퀸을 붙여나간다.</li>\n<li>각 솔루션의 하나의 element 와 함께 set of lists 로 만들어진다.</li>\n<li>kth 퀸을 놓아 가능한 모든 솔루션을 만들어낸다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> queens<span class=\"token punctuation\">(</span>n<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> placeQueens<span class=\"token punctuation\">(</span>k<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> Set<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n     <span class=\"token keyword\">else</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n        queens <span class=\"token keyword\">&lt;-</span> placeQueens<span class=\"token punctuation\">(</span>k <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        col <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">0</span> until n\n        <span class=\"token keyword\">if</span> isSafe<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> queens<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> col <span class=\"token operator\">:</span><span class=\"token operator\">:</span> queens\n\n  placeQueens<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기본적인 뼈대는 위와 같다. placeQueens 함수를 재귀호출하여, 이전 단계의 퀸 리스트들을 이용해 다음 퀸들을 배치하는 형태다. 한 depth 씩 내려가다보면 마지막에는 빈 셋에 0 에서 n 까지 각각 배치될것이다. 그리고 1 개의 퀸이 배치된 list 들에다 하나씩 추가해가면 마지막에는 모든 퀸이 놓인 체스판이 완성될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> isSafe<span class=\"token punctuation\">(</span>col<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> queens<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> row <span class=\"token operator\">=</span> queens<span class=\"token punctuation\">.</span>length\n  <span class=\"token keyword\">val</span> queensWithRow <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>row <span class=\"token operator\">-</span><span class=\"token number\">1</span> to <span class=\"token number\">0</span> by <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> zip queens\n  queensWithRow forall <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> col <span class=\"token operator\">!=</span> c <span class=\"token operator\">&amp;&amp;</span> math<span class=\"token punctuation\">.</span>abs<span class=\"token punctuation\">(</span>col <span class=\"token operator\">-</span> c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> row <span class=\"token operator\">-</span> r\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>기존 퀸 리스트에 새로운 퀸을 추가할 때 안전한지 검사하는 isSafe 함수다. case 부분만 유심히 보면 되는데, 각은 column 에 속하지 않으면서 대각선에 위치하지 않으면 safe 하다고 판단하고 퀸을 추가한다. 대각선상에 있는지는 컬럼의 차이와 행의 차이로 판단한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> show<span class=\"token punctuation\">(</span>queens<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> lines <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>col <span class=\"token keyword\">&lt;-</span> queens<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">yield</span> Vector<span class=\"token punctuation\">.</span>fill<span class=\"token punctuation\">(</span>queens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"* \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>updated<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> <span class=\"token string\">\"X \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mkString\n  <span class=\"token string\">\"\\n\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>lines mkString <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">(</span>queens<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> take <span class=\"token number\">3</span> map show<span class=\"token punctuation\">)</span> mkString <span class=\"token string\">\"\\n\"</span></code></pre></div>\n<p>마지막은 리스트들로 되어 있는 퀸들을 실제 체스판에 올려놓은 것 처럼 출력해주는 show 함수를 이용한다.\n결과는 아래와 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">res0: String =\n* * X * * * * *\nX * * * * * * *\n* * * * * * X *\n* * * * X * * *\n* * * * * * * X\n* X * * * * * *\n* * * X * * * *\n* * * * * X * *\n\n* * * * * X * *\n* * X * * * * *\nX * * * * * * *\n* * * * * * * X\n* * * X * * * *\n* X * * * * * *\n* * * * * * X *\n* * * * X * * *\n\n* * * * X * * *\n* X * * * * * *\n* * * * * * * X\nX * * * * * * *\n* * * X * * * *\n* * * * * * X *\n* * X * * * * *\n* * * * * X * *</code></pre></div>\n<h2>6.4 Maps</h2>\n<p>Map 에 대해서 알아보자.\nMap 은 다른 언어에서와 동일하게 Map[Key, Value]의 쌍으로 이루어져있다. 이때 Key, Value 는 숫자나 문자 등 어떤 타입이든 가능하다.\n또한 Map[Key, Value]는 Key => Value 의 함수 타입으로 확장 가능하다. 즉, Key 파라미터를 이용하면 Value 를 구할 수 있다는 말과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// key를 이용해 value를 가져올때</span>\ncapitalOfCountry<span class=\"token punctuation\">(</span><span class=\"token string\">\"andorra\"</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// exception 발생</span>\n\n<span class=\"token comment\">// 대신에 get을 사용한다.</span>\ncapitalOfCountry get <span class=\"token string\">\"andorra\"</span>  <span class=\"token comment\">// None</span></code></pre></div>\n<h3>Option Type</h3>\n<p>Option 은 covariant 하기 때문에 Option[A] > Option[Nothing]이다. 즉 None</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Option<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Some<span class=\"token punctuation\">[</span><span class=\"token operator\">+</span>A<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> A<span class=\"token punctuation\">)</span> extend Option<span class=\"token punctuation\">[</span>A<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">object</span> None extend Option<span class=\"token punctuation\">[</span><span class=\"token builtin\">Nothing</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>패턴 매칭을 이용하면 아래와 같이 나타낼 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> showCapital<span class=\"token punctuation\">(</span>country<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> capitalOfCountry<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>country<span class=\"token punctuation\">)</span> <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">case</span> Some<span class=\"token punctuation\">(</span>capital<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> capital\n  <span class=\"token keyword\">case</span> None <span class=\"token keyword\">=></span> <span class=\"token string\">\"missing data\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Sorted and GroupBy</h3>\n<p>sql 쿼리의 opertaion 을 사용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">// sorted</span>\n<span class=\"token keyword\">val</span> fruit <span class=\"token operator\">=</span> List<span class=\"token punctuation\">(</span><span class=\"token string\">\"apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pear\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pineapple\"</span><span class=\"token punctuation\">)</span>\nfruit<span class=\"token punctuation\">.</span>sortWith <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;</span> _<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// List(\"pear\", \"apple\", \"orange\", \"pineapple\")</span>\nfruit<span class=\"token punctuation\">.</span>sorted    <span class=\"token comment\">// List(\"apple\", \"orange\", \"pear\", \"pineapple\")</span>\n\n<span class=\"token comment\">// groupBy</span>\nfruit groupBy <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// Map(p -> List(pear, pineapple)),</span>\n<span class=\"token comment\">//     a -> List(apple),</span>\n<span class=\"token comment\">//     o -> List(orange))</span></code></pre></div>\n<p>groubBy 명령은 식별 함수 f 에 따라 collection 의 map 을 만든다.</p>\n<h3>Polynoial Example</h3>\n<p>from exponents to coefficient 방식으로 map 을 만든다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Poly<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> terms<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Poly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span>terms <span class=\"token operator\">++</span> other<span class=\"token punctuation\">.</span>terms<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> coeff<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> terms<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sorted<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> coeff<span class=\"token operator\">+</span><span class=\"token string\">\"x^\"</span><span class=\"token operator\">+</span>exp<span class=\"token punctuation\">)</span> mkString <span class=\"token string\">\" + \"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">6.2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span>Map<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">7.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\np1 <span class=\"token operator\">+</span> p2</code></pre></div>\n<p>두 다항식을 더하는 함수를 작성해보자. 양쪽 다항식에 exponents 가 같은 coefficient 끼리 더해주고 나머지 exponents 들을 합쳐주면 두 다항식의 합이 완성된다. 일단 말은 어렵지 않다.\n하지만 위의 식은 아래처럼 잘못된 결과가 도출된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">p1<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">6.2</span>x<span class=\"token operator\">^</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">4.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">1</span>\np2<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">7.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">0</span>\nres0<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">6.2</span>x<span class=\"token operator\">^</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">7.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">0</span></code></pre></div>\n<p>왜 그럴까??\n맵끼리 concatenating 할때는 아마 같은 키의 value 를 합치는게 아니라 뒤에 나오는 map 의 key 의 value 로 대체하기 때문에 이렇게 나오는 것이다.\n다음과 같이 바꿔보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Poly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span>terms <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>terms map adjust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> adjust<span class=\"token punctuation\">(</span>term<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> coeff<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> term\n  terms get exp <span class=\"token keyword\">match</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> Some<span class=\"token punctuation\">(</span>coeff1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> exp <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>coeff <span class=\"token operator\">+</span> coeff1<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">case</span> None <span class=\"token keyword\">=></span> exp <span class=\"token operator\">-</span><span class=\"token operator\">></span> coeff\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>뒤에 오는 other 에 adjust 함수를 매핑해보자.\nadjust 함수는 other 의 term 하나를 뽑아다가 terms 에 해당 exponent 가 있는지 확인하고 있으면 terms 와 other(term)의 coefficient 를 더해준다. 만약 없다면, othe 의 coeff 를 그대로 리턴한다.\n결과를 보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">p1<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">6.2</span>x<span class=\"token operator\">^</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">4.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">1</span>\np2<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">7.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">0</span>\nres0<span class=\"token operator\">:</span> Poly <span class=\"token operator\">=</span> <span class=\"token number\">6.2</span>x<span class=\"token operator\">^</span><span class=\"token number\">5</span> <span class=\"token operator\">+</span> <span class=\"token number\">11.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">2.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">3.0</span>x<span class=\"token operator\">^</span><span class=\"token number\">0</span></code></pre></div>\n<h3>Default Values</h3>\n<p>심플한 방법이 있었다.\nwithDefaultValue operation 을 이용하면 위의 함수를 좀더 간단하게 만들 수 있다.\nwithDefaultValue 를 이용해 좀더 개선해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Poly<span class=\"token punctuation\">(</span>terms0<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bindings<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>bindings<span class=\"token punctuation\">.</span>toMap<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">val</span> terms <span class=\"token operator\">=</span> terms0 withDefaultValue <span class=\"token number\">0.0</span>\n  <span class=\"token keyword\">def</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Poly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span>terms <span class=\"token operator\">++</span> <span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>terms map adjust<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> adjust<span class=\"token punctuation\">(</span>term<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> coeff<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> term\n    exp <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>coeff <span class=\"token operator\">+</span> terms<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> coeff<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> terms<span class=\"token punctuation\">.</span>toList<span class=\"token punctuation\">.</span>sorted<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> coeff<span class=\"token operator\">+</span><span class=\"token string\">\"x^\"</span><span class=\"token operator\">+</span>exp<span class=\"token punctuation\">)</span> mkString <span class=\"token string\">\" + \"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">4.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">6.2</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span><span class=\"token number\">0</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">3.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token number\">7.0</span><span class=\"token punctuation\">)</span>\np1 <span class=\"token operator\">+</span> p2\np1<span class=\"token punctuation\">.</span>terms<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>크게 두가지가 바뀌었다.\n첫째는 Poly 클래스의 parameter 에 default value 를 적용해주어 adjust 에서 패턴매칭하는 수고로움을 줄여 주었다. (exp -> (coeff + terms(exp)))\n그리고 둘째는 새로운 Poly 를 생성할 때, Map 타입을 지정해 주지 않아도, 생성자에서 (Int, Double)이 sequencial 하게 들어오면 이를 Map 으로 바꿔주도록 하였다.</p>\n<h3>Exercise</h3>\n<p>위에서 보았던 ’++’ 연산과 foldLeft 를 이용한 연산중 어느것이 더 효율적일까?</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Poly<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">new</span> Poly<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">.</span>terms foldLeft terms<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>addTerm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> addTerm<span class=\"token punctuation\">(</span>terms<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> term<span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Double</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> <span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">,</span> coeff<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> term\n  terms <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>exp <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token punctuation\">(</span>coeff <span class=\"token operator\">+</span> terms<span class=\"token punctuation\">(</span>exp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>fold 를 이용하면 위에서처럼 Map 을 생성하여 각 exponent 를 비교해서 값을 넣는게 아니라 기존부터 있던 terms 에다 즉각적으로 추가하기 때문에 ++보다 더 효율적이라 할 수 있다.</p>\n<h2>6.5 Putting the Pieces Together</h2>\n<p>전화번호를 문자로 바꾸는 예제를 살펴보자.\n참고로 해당 예제는 파이썬과 같은 스크립트 언어에서는 100 라인 정도, 그외에 일반적 목적의 프로그래밍 언어에서는 200~300 라인정도의 코드가 나왔다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> mnemonics <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span>\n       <span class=\"token string\">'2'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"DEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span> <span class=\"token keyword\">=></span> <span class=\"token string\">\"GHI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"JKL\"</span><span class=\"token punctuation\">,</span>\n       <span class=\"token string\">'6'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"MNO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"PQRS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"TUV\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"WXYZ\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>위와 같이 각 번호가 몇개의 문자열로 매핑되어 있다. 해당 숫자가 나왔을때 매핑된 문자열 중에 하나의 문자를 선택해서 출력해준다는 얘기다.</p>\n<p>예를 들어 “7225247386”를 convert 해보면 그 중 하나가 “SCALAISFUN”(Scala is fun)이 된다.</p>\n<p>전체코드는 다음과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> in <span class=\"token operator\">=</span> Source<span class=\"token punctuation\">.</span>fromURL<span class=\"token punctuation\">(</span><span class=\"token string\">\"http://lamp.epfl.ch/files/content/sites/lamp/files/teaching/progfun/linuxwords.txt\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> words <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span>getLines<span class=\"token punctuation\">.</span>toList filter <span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> word forall <span class=\"token punctuation\">(</span>chr <span class=\"token keyword\">=></span> chr<span class=\"token punctuation\">.</span>isLetter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> mnem <span class=\"token operator\">=</span> Map<span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'2'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"ABC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'3'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"DEF\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'4'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"GHI\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'5'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"JKL\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'6'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"MNO\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'7'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"PQRS\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'8'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"TUV\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'9'</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token string\">\"WXYZ\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">val</span> charCode<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">Char</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">Char</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>digit<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">&lt;-</span> mnem<span class=\"token punctuation\">;</span> ltr <span class=\"token keyword\">&lt;-</span> str<span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> ltr <span class=\"token operator\">-</span><span class=\"token operator\">></span> digit\n\n<span class=\"token comment\">/**\n * 파라미터로 들어온 문자열을 charCode로 변경함\n * @param word\n * @return\n */</span>\n<span class=\"token keyword\">def</span> wordCode<span class=\"token punctuation\">(</span>word<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span>\n  word<span class=\"token punctuation\">.</span>toUpperCase map charCode\n\n  wordCode<span class=\"token punctuation\">(</span><span class=\"token string\">\"Java\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// res0: String = 5282</span>\n\n<span class=\"token comment\">/**\n * A map form digit strings to the words that represent them,\n * e,g. \"5282\" -> List(\"Java\", \"Kata\", \"Lava\", ...)\n * Note: A missing number should map to the empty set, e,g. \"11111\" -> List()\n */</span>\n<span class=\"token keyword\">val</span> wordsForNum<span class=\"token operator\">:</span> Map<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">,</span> Seq<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  words groupBy wordCode withDefaultValue Seq<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">/**\n * Return all ways to encode a number as a list of words\n */</span>\n<span class=\"token keyword\">def</span> encode<span class=\"token punctuation\">(</span>number<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token punctuation\">[</span>List<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> Set<span class=\"token punctuation\">(</span>List<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 1 to number.length는 IndexedReq 타입이므로 Set 타입으로 변경해준다</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">{</span>\n      split <span class=\"token keyword\">&lt;-</span> <span class=\"token number\">1</span> to number<span class=\"token punctuation\">.</span>length\n      word <span class=\"token keyword\">&lt;-</span> wordsForNum<span class=\"token punctuation\">(</span>number take split<span class=\"token punctuation\">)</span>\n      rest <span class=\"token keyword\">&lt;-</span> encode<span class=\"token punctuation\">(</span>number drop split<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">yield</span> word <span class=\"token operator\">:</span><span class=\"token operator\">:</span> rest\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span>toSet\n\nencode<span class=\"token punctuation\">(</span><span class=\"token string\">\"7225247386\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> translate<span class=\"token punctuation\">(</span>number<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Set<span class=\"token punctuation\">[</span><span class=\"token builtin\">String</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n  encode<span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span> map<span class=\"token punctuation\">(</span>_ mkString <span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span>\n\ntranslate<span class=\"token punctuation\">(</span><span class=\"token string\">\"7225247386\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>지금까지 살펴본 스칼라 collection 은 아래와 같이 정리 할 수 있다.</p>\n<ul>\n<li>easy to use: few steps to do the job.</li>\n<li>concise: one word replaces a whole loop.</li>\n<li>safe: type checker is really good at catching errors.</li>\n<li>fast: collection ops art tuned, can be parallelized.</li>\n<li>universal: one vocabulary to work on all kinds of collections.</li>\n</ul>","frontmatter":{"title":"Functional Programming in Scala week 6","date":"July 26, 2016"}}},"pageContext":{"slug":"/2016/07/26/functional-programming-in-scala-week6/","previous":{"fields":{"slug":"/2016/07/26/functional-programming-in-scala-week5/"},"frontmatter":{"title":"Functional Programming in Scala week 5"}},"next":{"fields":{"slug":"/2016/08/18/frontend-javascript-framework-angularjs-week1/"},"frontmatter":{"title":"[coursera] AngularJS week 1"}}}}