{"data":{"site":{"siteMetadata":{"title":"bono's blog","author":"bono"}},"markdownRemark":{"id":"2da79658-002e-5fb6-be70-836eb5060bbc","excerpt":"CommonJs, AMD, ES6 Module require 와 import 에 대해서 비교해 보기 위해서는 우선  CommonJs 와  AMD(Asynchronous Module Definition) , ES…","html":"<h2>CommonJs, AMD, ES6 Module</h2>\n<p>require 와 import 에 대해서 비교해 보기 위해서는 우선 <a href=\"http://www.commonjs.org/\">CommonJs</a>와 <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD(Asynchronous Module Definition)</a>, ES6 내장모듈과 같은 자바스크립트의 모듈 시스템에 대해 알고 있어야 합니다. 모듈에 대한 본격적인 포스팅이 아니기 때문에 깊게 다루진 않겠습니다(사실 자세히 모르게도 합니다ㅠ).</p>\n<p>기존의 자바스크립트(ES5, 현재 대부분의 브라우저에서 지원하는 자바스크립트 문법)는 모듈이라는 개념이 부족하여 각 모듈(또는 파일)간의 의존성 처리에 제한이 있었습니다. 고전적인 웹 프로젝트에서 자바스크립트를 사용하는 방법을 살펴보면, HTML 파일내부에 <code class=\"language-text\">&lt;script&gt;</code> 태그를 삽입하여 모듈을 로드하고 있습니다. 하지만 이런 방식은 한가지 문제가 있는데, 자바스크립트 파일(또는 모듈)끼리 서로 모듈을 공유하는데 제약이 없다는점입니다. 그 이유는 script 태그로 로드된 모듈은 모두 window 객체의 속성이기 때문에 서로 다른 파일에 위치하면서도 모든 객체를 공유할 수 있기 때문입니다. 이처럼 각 자바스크립트 파일이 독립적으로 존재하지 못해 발생하는 여러 문제들(예를들어 다른 파일에서 같은 이름의 변수를 사용하는 경우) 때문에 하나의 모듈로 관리하기위한 다양한 패턴(모듈패턴, 즉시실행함수 등)을 사용하여 의존성을 관리할 수 밖에 없었습니다.</p>\n<p>이를 해결하기 위한 수단으로 모듈이라는 개념을 도입하여 정의한 방법(또는 표준)이 CommonJs 와 AMD 입니다. 이 둘은 내부적으로 모듈 서로 간의 의존성(로드)이 지원되지 않는 상태로 만들어졌는데, ES6 에 이르러 언어 내부적으로 자바스크립트 모듈 의존성을 지원하게 되었습니다(import, export).</p>\n<h3>모듈정의 방식의 혼용</h3>\n<p>ES6 모듈은 기본적으로 CommonJs 와 AMD 모듈을 혼용해서 사용할 수 있습니다. 모듈을 가져오는 부분에 require 와 import 를 같이 쓰더라도 문제없이 동작하죠. import 는 ES6 문법이라 현재 사용되는 브라우저에서는 지원하지 않지만 babel 과 같은 트랜스파일러가 해결해줄수 있습니다. AMD 는 생략하고 ES6 와 CommonJs 를 비교하여 설명해보겠습니다.</p>\n<p>모듈을 정의한다는 것은 다른 모듈에서 사용할 수 있도록 하나의 모듈로써 노출하겠다는 의미다.</p>\n<h4>모듈 정의하기 (export)</h4>\n<p><strong>ES6</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 모듈 전체를 export, 파일내 한번만 사용가능하다.</span>\n<span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> module\n\n\n<span class=\"token comment\">// 모든 속성을 export</span>\n<span class=\"token keyword\">export</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 함수를 직접 export</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">moduleFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> property <span class=\"token operator\">=</span> <span class=\"token string\">\"some property\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span>property<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><strong>CommonJs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 모듈 전체를 export</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> module\n\n<span class=\"token comment\">// 모든 속성을 export</span>\n<span class=\"token comment\">// (아시는 분 알려주세요)</span>\n\n<span class=\"token comment\">// 함수를 직접 export</span>\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">moduleFunc</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4>모듈 가져오기 (import)</h4>\n<p><strong>ES6</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 모듈 전체를 import</span>\n<span class=\"token keyword\">import</span> module\n<span class=\"token keyword\">import</span> module <span class=\"token keyword\">as</span> myModule\n\n\n<span class=\"token comment\">// 모든 속성 import</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> module\n\n\n<span class=\"token comment\">// 특정 멤버(함수 등)만 import</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>moduleFunc<span class=\"token punctuation\">,</span> moduleFunc2<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> module</code></pre></div>\n<p><strong>CommonJs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 모듈 전체를 import</span>\n<span class=\"token keyword\">var</span> module <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./someModule.js'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 모든 속성 import</span>\n<span class=\"token comment\">// (위의 module 객체에 모든 속성이 담아져 온다.)</span>\n\n<span class=\"token comment\">// 특정 멤버(함수 등)만 import, 위의 module을 이용한다.</span>\nmodule<span class=\"token punctuation\">.</span>moduleFunc</code></pre></div>\n<h3>결론</h3>\n<blockquote>\n<p>바벨과 같은 트랜스파일링 모듈을 사용한다면 주저없이 ES6 를 사용합니다.\n혼용하는것도 가능하지만 가급적이면 통일되게 사용하는 것이 좋다고 생각합니다.\n실제로 제가 프로젝트 진행하면서 mocha 테스트 중 ES6 의 import/export 와 CommonJs 의 <code class=\"language-text\">module.exports</code> 를 혼용하여 사용시 문제가 발생했었습니다(자세히 언급하지 않음).</p>\n</blockquote>\n<h3>참고</h3>\n<ul>\n<li><a href=\"http://d2.naver.com/helloworld/12864\">JavaScript 표준을 위한 움직임: CommonJS 와 AMD</a></li>\n<li><a href=\"https://www.exratione.com/2015/12/es6-use-of-import-property-from-module-is-not-a-great-plan/\">ES6: Use of “import { property } from ‘module’” is Not a Great Plan</a></li>\n</ul>","frontmatter":{"title":"[javascript] require vs import (CommonJs와 ES6)","date":"May 16, 2017"}}},"pageContext":{"slug":"/2017/05/16/ES-require-vs-import/","previous":{"fields":{"slug":"/2017/04/12/javascript-closure/"},"frontmatter":{"title":"[javascript] 클로저(closure)에 대해서 알아보자","tags":["javascript","closure"]}},"next":{"fields":{"slug":"/2017/06/20/create-react-app/"},"frontmatter":{"title":"[ReactJs] create-react-app으로 react 시작하기","tags":["react","js","create-react-app"]}}}}