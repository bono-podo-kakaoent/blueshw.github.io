{"componentChunkName":"component---src-templates-blog-post-js","path":"/2016/07/26/functional-programming-in-scala-week3/","result":{"data":{"site":{"siteMetadata":{"title":"bono blog","author":"bono","twitterUsername":"@blueshw"}},"markdownRemark":{"id":"8f2c8be8-9c37-5c9e-a2da-f502d48ac1cc","excerpt":"3.1 Class Hierachies abstract class (추상 클래스) 추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1 개 이상 멤버로 가진다. 스칼라의 추상클래…","html":"<h2 id=\"31-class-hierachies\" style=\"position:relative;\"><a href=\"#31-class-hierachies\" aria-label=\"31 class hierachies permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1 Class Hierachies</h2>\n<h3 id=\"abstract-class-추상-클래스\" style=\"position:relative;\"><a href=\"#abstract-class-%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"abstract class 추상 클래스 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>abstract class (추상 클래스)</h3>\n<p>추상 클래스는 abstract 키워드를 class 앞에 붙임으로써 정의할 수 있다. 추상 클래스는 구현체가 없는 추상함수를 1 개 이상 멤버로 가진다. 스칼라의 추상클래스는 자바의 그것과는 달리 new 로 선언할 수가 없다(자바의 추상클래스는 new 할당 가능, 대신 인터페이스는 new 할당이 불가함).</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> incl<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntSet\n  <span class=\"token keyword\">def</span> contains<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Empty <span class=\"token keyword\">extends</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> incl<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> NonEmpty<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Empty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Empty<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> contains<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span> <span class=\"token string\">\".\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> NonEmpty<span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> incl<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntSet <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> elem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> NonEmpty<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> left incl x<span class=\"token punctuation\">,</span> right<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> elem<span class=\"token punctuation\">)</span> <span class=\"token keyword\">new</span> NonEmpty<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> left<span class=\"token punctuation\">,</span> right incl x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">this</span>\n\n  <span class=\"token keyword\">def</span> contains<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> elem<span class=\"token punctuation\">)</span> left contains x\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">></span> elem<span class=\"token punctuation\">)</span> right contains x\n    <span class=\"token keyword\">else</span> <span class=\"token boolean\">true</span>\n\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> toString <span class=\"token operator\">=</span> <span class=\"token string\">\"{\"</span> <span class=\"token operator\">+</span> left <span class=\"token operator\">+</span> elem <span class=\"token operator\">+</span> right <span class=\"token operator\">+</span> <span class=\"token string\">\"}\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> t1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> NonEmpty<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Empty<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Empty<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// t1: NonEmpty = {.3.}</span>\n<span class=\"token keyword\">val</span> t2 <span class=\"token operator\">=</span> t1 incl <span class=\"token number\">4</span>\n<span class=\"token comment\">//t1: NonEmpty = {.3.}</span></code></pre></div>\n<p>위에서 IntSet 은 Empty 와 NonEmpty 클래스의 base class 이다. 구현체가 없는 incl 메소드와 contains 메소드는 각각 Empty 와 NonEmpty 클래스에서 구현하게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> Base <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">def</span> bar<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Sub <span class=\"token keyword\">extends</span> Base <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n  <span class=\"token keyword\">def</span> bar <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Base 클래스의 foo 메서드는 구현체가 있고 bar 메서드는 구현체가 없다. 구현체가 없는 bar 메서드 같은 경우에는 Sub 클래스에서 바로 구현해주면 되지만, 구현체가 없는 foo 메서드는 반드시 메서드 앞에 override 키워드를 붙여서 재정의 해야한다.(참고로 bar 메서드 앞에 override 키워드를 붙이는 것은 optional)\n자바같은 경우 메소드 오버라이드 할때는 별도의 modifier 를 지정해주지 않는다. scala 에서 이렇게 하는 이유는 override 키워드가 없는 경우에는 실제로 어떤 메서드가 오버라이드되는지 모르기 때문에 잘못된 오버라이드로 인해 Base 클래스의 메서드가 영향을 받을 수도 있기 때문이다.</p>\n<h3 id=\"object\" style=\"position:relative;\"><a href=\"#object\" aria-label=\"object permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>object</h3>\n<p>여러개의 instance 를 만들 필요 없는 클래스 같은 경우에는 간단히 object 를 이용한다. object 정의는 class 정의와 동일하지만 new 키워드로 여러개의 instance 를 만들 수 없고 단지 하나의 object 로 작동한다(singleton object).\n오직 Empty 클래스에만 object 를 쓸 수 있는데, 그 이유는 NonEmpty 클래스는 몇개의 파라미터를 가지고 있다. object 는 value 라 했으므로, object 가 정의됨과 동시에 모두 평가되어야하므로 파라미터로 인한 값의 변화를 취할수 없다.\nevaluation 측면에서 보자면, 위에서도 얘기 했듯이 object 자체는 이미 value 기 때문에 아래와 같이 Empty 로 바뀐 부분이 별도의 evalutaion 과정이 불필요하다.</p>\n<h3 id=\"exercise---union-함수-구현\" style=\"position:relative;\"><a href=\"#exercise---union-%ED%95%A8%EC%88%98-%EA%B5%AC%ED%98%84\" aria-label=\"exercise   union 함수 구현 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exercise - union 함수 구현</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> incl<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntSet\n  <span class=\"token keyword\">def</span> contains<span class=\"token punctuation\">(</span>x<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n  <span class=\"token keyword\">def</span> union<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> IntSet\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">object</span> Empty <span class=\"token keyword\">extends</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">def</span> union<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> other\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> NonEmpty<span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> left<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">,</span> right<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> IntSet <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">def</span> union<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> IntSet<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>left union right<span class=\"token punctuation\">)</span> union other<span class=\"token punctuation\">)</span> incl elem\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>으아... 어렵다\n대략 짐작해보자면, (left union right) 부분이 실행되면 left 가 현재 node 가 되고 right 가 other 가 된다. 계속해서 깊게 내려가다 보면, 언젠가 leaf node 가 나오게 되는데 leaf node 의 left 와 right 는 모두 Empty 이므로 결국 incl elem 에 의해 자기자신이 리턴된다. 그리고 한칸씩 올라오면서 left 의 elem 을 떼다가 right 트리에 include 를 시도하는 과정을 거친다. 그 과정이 계속되면, 결국은 하나의 binary tree 가 만들어진다.</p>\n<h3 id=\"동적-바인딩\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"동적 바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적 바인딩</h3>\n<p>메소드를 포함하는 object 타입은 런타임에 메소드가 실행된다.</p>\n<h2 id=\"32-how-classes-are-organized\" style=\"position:relative;\"><a href=\"#32-how-classes-are-organized\" aria-label=\"32 how classes are organized permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2 How Classes Are Organized</h2>\n<h3 id=\"package\" style=\"position:relative;\"><a href=\"#package\" aria-label=\"package permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Package</h3>\n<p>자바의 패키지 지정 방식과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">progfun<span class=\"token punctuation\">.</span>examples</span>\n\n<span class=\"token keyword\">object</span> Hello <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같은 패키지와 object 가 있다면, progfun.examples.Hello 와 같은 full qualified name 으로 Hello 오브젝트에 접근 가능하다</p>\n<h3 id=\"import\" style=\"position:relative;\"><a href=\"#import\" aria-label=\"import permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>import</h3>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">import</span> week3<span class=\"token punctuation\">.</span>Rational           <span class=\"token comment\">// imports just Rational</span>\n<span class=\"token keyword\">import</span> week3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">{</span>Rational<span class=\"token punctuation\">,</span> Hello<span class=\"token punctuation\">}</span>  <span class=\"token comment\">// imports both Rational and Hello</span>\n<span class=\"token keyword\">import</span> week3<span class=\"token punctuation\">.</span>_                  <span class=\"token comment\">// import everything in package week3</span></code></pre></div>\n<p>import 하는 방법은 자바와 거의 비슷한데 몇가지 다른점이 있다면, 첫째로는 한줄에 여러개의 class or object 를 호출하기 위해서 중괄호를 사용하는 방법이 있다. 그리고 특정 패키지의 모든 class 와 object 를 가져오기 위해 '_'를 이용할 수 있다.</p>\n<p>스칼라 프로그램에서 자동으로 import 되는 패키지 또는 obejct\nAll members of package scala\nAll members of package java.lang\nAll members of the singleton object scala.Predef</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\">require       scala<span class=\"token punctuation\">.</span>Predef<span class=\"token punctuation\">.</span>require\nassert        scala<span class=\"token punctuation\">.</span>Predef<span class=\"token punctuation\">.</span>assert</code></pre></div>\n<h3 id=\"traits\" style=\"position:relative;\"><a href=\"#traits\" aria-label=\"traits permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Traits</h3>\n<p>스칼라도 자바처럼 상속을 하나의 클래스에서만 받을 수 있다. 그렇기 때문에 자바와 동일하게 여러개의 슈퍼타입이 필요한 경우 traits 키워드를 이용하여 구현할 수 있다. 참고로 trait 키워드는 abstract class 와 동일하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> Planar <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">def</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span>\n  <span class=\"token keyword\">def</span> surface <span class=\"token operator\">=</span> height  width\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Square <span class=\"token keyword\">extends</span> Shape <span class=\"token keyword\">with</span> Planar <span class=\"token keyword\">with</span> Movable <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>클래스와 오브젝트 traits 셋다 traits 를 상속받을 수 있다. 그리고 interface 처럼 하나의 클래스가 여러개의 traits 상속이 가능하다. traits 가 자바의 interface 와 비슷해보이지만 field 를 가질 수 있는 점과, 실제 구현 메서드를 가질 수 있는 점에서 더 강력하다 할 수 있다. 자바에도 추상클래스(abstract class)가 있지만, 추상클래스는 말그대로 클래스이기 때문에 인터페이스처럼 여러개를 구현하지는 못한다. 그렇기 때문에 스칼라의 trait 가 좀 더 유연하게 사용될 수 있다. 대신 traits 는 파라미터를 가질 수 없다는 단점이 있다.</p>\n<h3 id=\"스칼라-타입-클래스-구조-scalas-class-hierarchy\" style=\"position:relative;\"><a href=\"#%EC%8A%A4%EC%B9%BC%EB%9D%BC-%ED%83%80%EC%9E%85-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0-scalas-class-hierarchy\" aria-label=\"스칼라 타입 클래스 구조 scalas class hierarchy permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>스칼라 타입 클래스 구조 (Scala's Class Hierarchy)</h3>\n<p><img src=\"http://docs.scala-lang.org/resources/images/classhierarchy.img_assist_custom.png\" alt=\"스칼라 타입 클래스 구조\"></p>\n<p>출처 : <a href=\"http://docs.scala-lang.org/tutorials/tour/unified-types.html\">http://docs.scala-lang.org/tutorials/tour/unified-types.html</a></p>\n<h4 id=\"any\" style=\"position:relative;\"><a href=\"#any\" aria-label=\"any permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Any</h4>\n<ul>\n<li>모든 타입의 가장 상위 타입, '==', '!=',</li>\n<li>'equals', 'hashCode', 'toString'</li>\n</ul>\n<h4 id=\"anyref\" style=\"position:relative;\"><a href=\"#anyref\" aria-label=\"anyref permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AnyRef</h4>\n<ul>\n<li>Any 클래스를 상속받는다.</li>\n<li>모든 레퍼런스 타입(ex. List, String)의 기본 타입이다.</li>\n<li>java.lang.Object 의 별칭이다.</li>\n</ul>\n<h4 id=\"anyval\" style=\"position:relative;\"><a href=\"#anyval\" aria-label=\"anyval permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AnyVal</h4>\n<ul>\n<li>Any 클래스를 상속받는다.</li>\n<li>모든 primitive types(Int, Float, Char 등)의 베이스 타입이다</li>\n</ul>\n<h4 id=\"scalanothing\" style=\"position:relative;\"><a href=\"#scalanothing\" aria-label=\"scalanothing permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scala.Nothing</h4>\n<ul>\n<li>모든 다른 AnyVal 타입의 subType 이다.</li>\n<li>값을 가지지 않는다.</li>\n<li>함수가 비정상적으로 종료되거나 예외가 발생할 경우 Nothing 을 리턴할 수 있다.</li>\n<li>비어있는 collection 을 요소 타입으로서 존재 (ex. Set[Nothing])</li>\n</ul>\n<h3 id=\"null\" style=\"position:relative;\"><a href=\"#null\" aria-label=\"null permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Null</h3>\n<p>The type of null is Null, null 의 타입은 Null 이라는 말\n모든 다른 AnyRef 타입의 subType 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>          <span class=\"token comment\">// x: Null</span>\n<span class=\"token keyword\">val</span> y<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>  <span class=\"token comment\">// y: String</span>\n<span class=\"token keyword\">val</span> z<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>     <span class=\"token comment\">// error: type mismatch, 레퍼런스 타입만 적용</span></code></pre></div>\n<h2 id=\"33-polymorphism\" style=\"position:relative;\"><a href=\"#33-polymorphism\" aria-label=\"33 polymorphism permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3 Polymorphism</h2>\n<p>아래 두 Cons 클래스는 동일한 표현이다.\n클래스 파라미터에 value 를 사용하는 것은, implementaion 해야할 함수를 파라미터에 직접 구현하는 것과 같다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> head<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> tail<span class=\"token operator\">:</span> IntList<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> IntList <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 즉, _head, _tail 은 쓰지 않는 이름</span>\n<span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">(</span>_head<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> _tail<span class=\"token operator\">:</span> IntList<span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> IntList <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">val</span> head <span class=\"token operator\">=</span> _head\n  <span class=\"token keyword\">val</span> tail <span class=\"token operator\">=</span> _tail\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cons 클래스와 List trait 를 generic 하게 구현한다</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">trait</span> List<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> isEmpty<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span>\n  <span class=\"token keyword\">def</span> head<span class=\"token operator\">:</span> T\n  <span class=\"token keyword\">def</span> tail<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Cons<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">val</span> head<span class=\"token operator\">:</span> T<span class=\"token punctuation\">,</span> <span class=\"token keyword\">val</span> tail<span class=\"token operator\">:</span> List<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> isEmpty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> Nil<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token keyword\">extends</span> List<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">def</span> isEmpty<span class=\"token operator\">:</span> <span class=\"token builtin\">Boolean</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token keyword\">def</span> head<span class=\"token operator\">:</span> <span class=\"token builtin\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> NoSuchElementException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Nil.head\"</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">def</span> tail<span class=\"token operator\">:</span> <span class=\"token builtin\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> NoSuchElementException<span class=\"token punctuation\">(</span><span class=\"token string\">\"Nil.tail\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수도 제네릭하게 구현할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">def</span> singleton<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>elem<span class=\"token operator\">:</span> T<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Cons<span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> Nil<span class=\"token punctuation\">[</span>T<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nsingleton<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsingleton<span class=\"token punctuation\">[</span><span class=\"token builtin\">Boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 아래와 같이 호출가능</span>\nsingleton<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\nsingleton<span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>마지막 두 줄과 같이 호출 가능한 이유는 스칼라 컴파일러가 함수 call 이 발생하면 해당 함수의 파라미터 타입을 추론할 수 있기 때문이다.</p>\n<h3 id=\"polymorphism\" style=\"position:relative;\"><a href=\"#polymorphism\" aria-label=\"polymorphism permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Polymorphism</h3>\n<blockquote>\n<p>Polymorphism means that a function type comes \"in many forms\".\n프로그램 측면에서 보면, 함수의 파라미터가 여러 타입으로 적용할 수 있고, 타입은 다양한 타입의 인스턴스를 가질 수 있다는 말이다.</p>\n</blockquote>\n<h3 id=\"다형성의-두가지-주요개념\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%98-%EB%91%90%EA%B0%80%EC%A7%80-%EC%A3%BC%EC%9A%94%EA%B0%9C%EB%85%90\" aria-label=\"다형성의 두가지 주요개념 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다형성의 두가지 주요개념</h3>\n<ul>\n<li>subtyping : instance of a subclass can be passed to a base class</li>\n<li>generics : instances of a function or class are created by type parameterization</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"/2016/07/26/functional-programming-in-scala-week3/#31-class-hierachies\">3.1 Class Hierachies</a></p>\n<ul>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#abstract-class-%EC%B6%94%EC%83%81-%ED%81%B4%EB%9E%98%EC%8A%A4\">abstract class (추상 클래스)</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#object\">object</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#exercise---union-%ED%95%A8%EC%88%98-%EA%B5%AC%ED%98%84\">exercise - union 함수 구현</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#%EB%8F%99%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\">동적 바인딩</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2016/07/26/functional-programming-in-scala-week3/#32-how-classes-are-organized\">3.2 How Classes Are Organized</a></p>\n<ul>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#package\">Package</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#import\">import</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#traits\">Traits</a></li>\n<li>\n<p><a href=\"/2016/07/26/functional-programming-in-scala-week3/#%EC%8A%A4%EC%B9%BC%EB%9D%BC-%ED%83%80%EC%9E%85-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B5%AC%EC%A1%B0-scalas-class-hierarchy\">스칼라 타입 클래스 구조 (Scala's Class Hierarchy)</a></p>\n<ul>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#any\">Any</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#anyref\">AnyRef</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#anyval\">AnyVal</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#scalanothing\">Scala.Nothing</a></li>\n</ul>\n</li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#null\">Null</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"/2016/07/26/functional-programming-in-scala-week3/#33-polymorphism\">3.3 Polymorphism</a></p>\n<ul>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#polymorphism\">Polymorphism</a></li>\n<li><a href=\"/2016/07/26/functional-programming-in-scala-week3/#%EB%8B%A4%ED%98%95%EC%84%B1%EC%9D%98-%EB%91%90%EA%B0%80%EC%A7%80-%EC%A3%BC%EC%9A%94%EA%B0%9C%EB%85%90\">다형성의 두가지 주요개념</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Functional Programming in Scala week 3","date":"2016-07-26"}}},"pageContext":{"slug":"/2016/07/26/functional-programming-in-scala-week3/","previous":{"fields":{"slug":"/2016/07/26/functional-programming-in-scala-week2/"},"frontmatter":{"title":"Functional Programming in Scala week 2","tags":["scala","coursera"]}},"next":{"fields":{"slug":"/2016/07/26/functional-programming-in-scala-week4/"},"frontmatter":{"title":"Functional Programming in Scala week 4","tags":["scala","coursera"]}}}},"staticQueryHashes":[]}