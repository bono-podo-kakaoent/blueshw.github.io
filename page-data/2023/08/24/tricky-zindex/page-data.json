{"componentChunkName":"component---src-templates-blog-post-js","path":"/2023/08/24/tricky-zindex/","result":{"data":{"site":{"siteMetadata":{"title":"bono blog","author":"bono"}},"markdownRemark":{"id":"529e5053-4010-502f-a841-547e40da11c5","excerpt":"CSS의 z-index 속성은 웹 페이지에서 요소 간의 순서를 조절할 때 중요한 역할을 합니다. 그러나 z-index의 동작 방식을 제대로 이해하지 못하면 혼란스러운 상황에 빠집니다. 도대체 어디가 문제인지 알 수 없게 되어버리죠. 오늘은 CSS를 …","html":"<p>CSS의 z-index 속성은 웹 페이지에서 요소 간의 순서를 조절할 때 중요한 역할을 합니다. 그러나 z-index의 동작 방식을 제대로 이해하지 못하면 혼란스러운 상황에 빠집니다. 도대체 어디가 문제인지 알 수 없게 되어버리죠. 오늘은 CSS를 작성할때 부딪칠수 있는 z-index의 동작 원리와 몇 가지 문제점에 대해 알아보겠습니다.</p>\n<h3 id=\"z-index의-기본적-사용법\" style=\"position:relative;\"><a href=\"#z-index%EC%9D%98-%EA%B8%B0%EB%B3%B8%EC%A0%81-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"z index의 기본적 사용법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>z-index의 기본적 사용법</h3>\n<p>z-index는 요소의 스택 순서를 정의하는 CSS 속성입니다. 값이 높은 요소가 다른 요소 위에 나타나도록 그려줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.layout</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 10<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.button</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 예시에서 .layout에 z-index가 10으로 설정되어 있으므로 <code class=\"language-text\">.button</code>보다 위쪽에  표시됩니다.</p>\n<p>당연하지만,,, 쉽죠?</p>\n<h3 id=\"stacking-context\" style=\"position:relative;\"><a href=\"#stacking-context\" aria-label=\"stacking context permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Stacking Context</h3>\n<p>지금부터 헷갈릴 수 있습니다. 어떻게 보면 <code class=\"language-text\">z-index</code>의 핵심이라 할 수 있는데요. 스태킹 컨텍스트는 문서의 일부분을 나타내는 개념으로, 그 안의 자식 요소들은 독립적인 층을 형성합니다. z-index는 동일한 스태킹 컨텍스트 내에서 유효하기 때문에 서로 다른 스택 컨텍스트에 있는 요소와 z-index 값의 비교는 의미가 없겠죠.</p>\n<p>스택 컨텍스트 생성 조건은 다음과 같습니다.</p>\n<ul>\n<li>HTML <code class=\"language-text\">루트</code> 요소</li>\n<li>position 값이 <code class=\"language-text\">static이 아닌 요소</code></li>\n<li>opacity가 <code class=\"language-text\">1보다 작은 요소</code></li>\n<li><code class=\"language-text\">transform, filter, perspective, clip-path, mask, contain, will-change</code> 등의 값이 none 이외의 값을 가진 요소</li>\n<li>flex 및 grid 컨테이너의 자식 요소에서 <code class=\"language-text\">z-index 값이 auto가 아닐 때</code></li>\n<li>position 값이 <code class=\"language-text\">fixed 또는 sticky</code></li>\n</ul>\n<p>예를 살펴보죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>parent<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  Parent\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Child<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token selector\">.parent</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token selector\">.child</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> relative<span class=\"token punctuation\">;</span>\n  <span class=\"token property\">z-index</span><span class=\"token punctuation\">:</span> 10<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>여기서 <code class=\"language-text\">.child는 .parent 안에서만</code> 유효한 z-index 값을 가집니다. 다시 한번 말하지만 다른 스택 컨텍스트에 있는 요소와는 z-index를 비교할 수 없습니다.</p>\n<h3 id=\"z-index-사용-시-발생하는-문제점\" style=\"position:relative;\"><a href=\"#z-index-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90\" aria-label=\"z index 사용 시 발생하는 문제점 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>z-index 사용 시 발생하는 문제점</h3>\n<p>스택 컨텍스트만 이해한다면 사실 z-index 사용 시 실수할 일이 없습니다. 하지만, 여러 사람이 함께 모여있는 팀에서는 z-index 사용으로 혼란을 줄 수 있습니다. </p>\n<h4 id=\"position-속성에-대한-이해\" style=\"position:relative;\"><a href=\"#position-%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\" aria-label=\"position 속성에 대한 이해 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>position 속성에 대한 이해</h4>\n<p>z-index는 position이 static이 아닌 요소에만 적용된다(relative, absolute, fixed, sticky). 만약 <code class=\"language-text\">position: static</code>인 요소에 z-index를 적용하려 한다면, 동작하지 않는다. </p>\n<h4 id=\"예상치-못한-스택-컨텍스트-생성\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%83%81%EC%B9%98-%EB%AA%BB%ED%95%9C-%EC%8A%A4%ED%83%9D-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"예상치 못한 스택 컨텍스트 생성 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예상치 못한 스택 컨텍스트 생성</h4>\n<p>앞서 말했듯 opacity, transform, filter와 같은 속성은 스택 컨텍스트를 생성합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.element {\n  position: relative;\n  z-index: 5;\n  opacity: 0.9;\n}</code></pre></div>\n<p><code class=\"language-text\">.element</code>는 opacity 속성 때문에 새로운 스택 컨텍스트를 생성합니다. 예상치 못한 스택 컨텍스트로 인해 코드를 읽는데 혼란이 발생할 수 있겠죠. 스택 컨텍스트 생성 속성을 사용할 때는 항상 주의가 필요합니다. 필요한 경우 부모 요소에 추가 스타일을 적용하여 해결하면 되겠네요.</p>\n<h4 id=\"일관된-값-사용하기\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EA%B4%80%EB%90%9C-%EA%B0%92-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"일관된 값 사용하기 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일관된 값 사용하기</h4>\n<p>9999, 200000 등 무작정 의미 없는 큰 수를 사용하는 것은 문제가 있습니다. 이는 z-index를 제대로 이해하지 못하고 대응하는 방식입니다. <code class=\"language-text\">SASS나 LESS</code> 같은 도구를 사용해 변수화해서 사용하면 헷갈리지 않고 팀 작업이 가능합니다.</p>\n<h4 id=\"z-index-사용-최소화\" style=\"position:relative;\"><a href=\"#z-index-%EC%82%AC%EC%9A%A9-%EC%B5%9C%EC%86%8C%ED%99%94\" aria-label=\"z index 사용 최소화 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>z-index 사용 최소화</h4>\n<p>z-index에 대한 이해가 명확하다면 많이 사용할 일이 없습니다. 하지만, 애매한 지식이 오히려 무분별한 z-index 남용으로 이어지는데요. 대규모 서비스를 구축할 때 이러한 방식은 자신뿐 아니라 팀원 모두에게 피해를 줍니다. </p>\n<p>명확한 z-index 관리 전략을 설정하고 팀원들과 공유해야 합니다. 예를 들어, 특정 범위를 모달 창, 알림, 툴팁 등의 목적 등으로 예약하는 것이 좋습니다.</p>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>z-index는 복잡해 보이지만 기본 원칙을 이해하면 쉽게 다룰 수 있습니다. (스택 컨텍스트) 이 원칙을 기억하고, 웹 페이지의 요소 간 순서를 제어할 때는 가급적 사용을 줄이는 것이 좋고, 반드시 써야 한다면 팀에 정해진 컨벤션에 따라 최소한으로 사용해야 합니다. </p>","tableOfContents":"<ul>\n<li><a href=\"/2023/08/24/tricky-zindex/#z-index%EC%9D%98-%EA%B8%B0%EB%B3%B8%EC%A0%81-%EC%82%AC%EC%9A%A9%EB%B2%95\">z-index의 기본적 사용법</a></li>\n<li><a href=\"/2023/08/24/tricky-zindex/#stacking-context\">Stacking Context</a></li>\n<li>\n<p><a href=\"/2023/08/24/tricky-zindex/#z-index-%EC%82%AC%EC%9A%A9-%EC%8B%9C-%EB%B0%9C%EC%83%9D%ED%95%98%EB%8A%94-%EB%AC%B8%EC%A0%9C%EC%A0%90\">z-index 사용 시 발생하는 문제점</a></p>\n<ul>\n<li><a href=\"/2023/08/24/tricky-zindex/#position-%EC%86%8D%EC%84%B1%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9D%B4%ED%95%B4\">position 속성에 대한 이해</a></li>\n<li><a href=\"/2023/08/24/tricky-zindex/#%EC%98%88%EC%83%81%EC%B9%98-%EB%AA%BB%ED%95%9C-%EC%8A%A4%ED%83%9D-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1\">예상치 못한 스택 컨텍스트 생성</a></li>\n<li><a href=\"/2023/08/24/tricky-zindex/#%EC%9D%BC%EA%B4%80%EB%90%9C-%EA%B0%92-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\">일관된 값 사용하기</a></li>\n<li><a href=\"/2023/08/24/tricky-zindex/#z-index-%EC%82%AC%EC%9A%A9-%EC%B5%9C%EC%86%8C%ED%99%94\">z-index 사용 최소화</a></li>\n</ul>\n</li>\n<li><a href=\"/2023/08/24/tricky-zindex/#%EA%B2%B0%EB%A1%A0\">결론</a></li>\n</ul>","frontmatter":{"title":"써도 써도 헷갈리는 z-index의 미스터리","date":"2023-08-24"}}},"pageContext":{"slug":"/2023/08/24/tricky-zindex/","previous":{"fields":{"slug":"/2020/10/11/gatsby-blog-to-css-modules/"},"frontmatter":{"title":"gatsby 블로그에 CSS Modules 적용하기","tags":["gatsby","CSS","CSS-in-JS","CSS-in-CSS","CSS Modules"]}},"next":null}},"staticQueryHashes":[]}